// 数组的解构
// const arr = [100,200,300];
// // 以前获取数组中指定的元素需要通过索引获取对应的值.如下:
// const a = arr[0];
// const b = arr[1];
// const c = arr[2];
// console.log(a,b,c);//100 200 300
// // 现在通过解构的方式去快速提取数组中指定的成员
// const arr = [100,200,300];
// const [a,b,c] = arr;//以前设置变量名的地方放一个[],然后在[]里面是从数组中提取出来的数据所存放的变量a,b,c，那内部按照变量名出现的位置分配数组中所对应的位置的数组
// console.log(a,b,c);//100 200 300
// //----------------------------------------
// // 如果想获取第三个成员
// const arr = [100,200,300];
// const [,,c] = arr;//就把前两个变量去掉，保留逗号，确保解构的格式与数组是一致的
// console.log(c);//300
// const arr = [100,200,300];
// const [a,...d] = arr;//三个点表示提取从当前位置往后的所有成员
// console.log(d);//[ 200, 300 ]
// // 需要注意的是，这种三个点的用法只能在解构的最后一个位置使用
// // 解构位置的成员少于数组长度，就会从前到后的顺序去提取，后面的多出来的成员就不会被提取
// const arr = [100,200,300];
// const [a] = arr;
// console.log(a);//100
// //相反呢，解构位置的成员大于数组的长度，多余的成员会返回undefined
// const arr = [100,200,300];
// const [a,b,c,d] = arr;
// console.log(a,b,c,d);//100 200 300 undefined
// //给解构成员设置默认值，在解构位置变量后面跟上=并附上默认值，那么当我们没有提取到数组当中对应的成员，那么这里就会得到默认值
// const arr = [100,,300];
// const [a,b='bbb',c,d='ddd'] = arr;
// console.log(a,b,c,d);//100 bbb 300 ddd
// 实例：截取字符串中的某一个值
// 以前的做法
const str = '/a/b/c';
const arr = str.split('/');
const a = arr[1];
console.log(a);//a
// 现在的做法
const [,rabt] = arr;
console.log(rabt);//a